// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.MyConecction;

namespace WCFServiceHost.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20231221185531_FisrtMigration")]
    partial class FisrtMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WCFServiceHost.Domain.Address", b =>
                {
                    b.Property<int>("IdAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClienteRef")
                        .HasColumnType("int");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UF")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.HasIndex("ClienteRef")
                        .IsUnique();

                    b.ToTable("Addresss");
                });

            modelBuilder.Entity("WCFServiceHost.Domain.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime?>("Data_Expedicao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Data_Nascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Estado_Civil")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Orgao_Expedicao")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("RG")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("UF_Expedicao")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("IdCliente");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("WCFServiceHost.Domain.Address", b =>
                {
                    b.HasOne("WCFServiceHost.Domain.Cliente", "Cliente")
                        .WithOne("Address")
                        .HasForeignKey("WCFServiceHost.Domain.Address", "ClienteRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
